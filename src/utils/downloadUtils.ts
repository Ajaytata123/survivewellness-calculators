
import { ResultForDownload } from "@/types/calculatorTypes";
import { showDownloadToast, showShareToast, showErrorToast } from "./notificationUtils";

// Function to prepare results for download in CSV format
export const prepareResultsForCSV = (results: ResultForDownload): string => {
  let csvContent = `${results.title} Results,\n`;
  csvContent += `Date,${results.date}\n`;
  csvContent += `Unit System,${results.unitSystem}\n`;
  if (results.userName) {
    csvContent += `Name,${results.userName}\n`;
  }
  csvContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    csvContent += `${key},${value}\n`;
  });
  
  // Survivewellness branding and link 
  csvContent += `\nGenerated by,Survivewellness Health Tools\n`;
  csvContent += `For more calculators,visit https://survivewellness.com/tools-calculators/\n`;
  csvContent += `Thank you for using Survivewellness Health Calculators!`;

  return csvContent;
};

// Function to download results as CSV
export const downloadResultsAsCSV = (results: ResultForDownload, calculatorName: string): void => {
  try {
    const csvContent = prepareResultsForCSV(results);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `survivewellness-${calculatorName}-results.csv`);
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    // Show success notification with slight delay for mobile
    setTimeout(() => {
      showDownloadToast();
    }, 100);
  } catch (error) {
    console.error("Error generating CSV:", error);
    showErrorToast("Error downloading results. Please try again.");
  }
};

// Function to prepare results as text
export const prepareResultsAsText = (results: ResultForDownload): string => {
  let textContent = `${results.title} Results\n`;
  textContent += `Date: ${results.date}\n`;
  textContent += `Unit System: ${results.unitSystem}\n`;
  if (results.userName) {
    textContent += `Name: ${results.userName}\n`;
  }
  textContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    textContent += `${key}: ${value}\n`;
  });

  // Survivewellness branding and link
  textContent += `\nGenerated by: Survivewellness\n`;
  textContent += `For more calculators, visit: https://survivewellness.com/tools-calculators/\n`;
  textContent += `Thank you for using Survivewellness!`;

  return textContent;
};

// Enhanced function to share results with web share API
export const shareResults = (results: ResultForDownload): Promise<void> => {
  return new Promise((resolve, reject) => {
    const textResults = prepareResultsAsText(results);
    
    // Check if Web Share API is supported (works on mobile and some desktop browsers)
    if (navigator.share) {
      navigator
        .share({
          title: `${results.title} Results from Survivewellness`,
          text: textResults,
          url: window.location.href
        })
        .then(() => {
          setTimeout(() => {
            showShareToast();
          }, 100);
          resolve();
        })
        .catch((error) => {
          // If user cancels the share, don't show error
          if (error.name !== 'AbortError') {
            console.error("Error sharing results:", error);
            // Fallback to clipboard
            fallbackShare(textResults, resolve);
          } else {
            resolve();
          }
        });
    } else {
      // Fallback for browsers that don't support Web Share API
      fallbackShare(textResults, resolve);
    }
  });
};

// Fallback share method for browsers without Web Share API
const fallbackShare = (text: string, resolve: () => void) => {
  // Try to copy to clipboard first
  if (navigator.clipboard && navigator.clipboard.writeText) {
    navigator.clipboard.writeText(text)
      .then(() => {
        setTimeout(() => {
          showShareToast();
        }, 100);
        resolve();
      })
      .catch(() => {
        // Final fallback - open email client
        openEmailClient(text);
        resolve();
      });
  } else {
    // Final fallback - open email client
    openEmailClient(text);
    resolve();
  }
};

// Open email client as final fallback
const openEmailClient = (text: string) => {
  const subject = encodeURIComponent('My Health Calculator Results from Survivewellness');
  const body = encodeURIComponent(text);
  const mailtoLink = `mailto:?subject=${subject}&body=${body}`;
  window.open(mailtoLink, '_blank');
  
  setTimeout(() => {
    showShareToast();
  }, 100);
};

// Create a shareable link with encoded parameters
export const createShareableLink = (calculatorType: string, params: Record<string, string>): string => {
  const baseUrl = "#";
  const searchParams = new URLSearchParams();
  
  searchParams.append("calculator", calculatorType);
  
  Object.entries(params).forEach(([key, value]) => {
    searchParams.append(key, value);
  });
  
  return `${baseUrl}${calculatorType}?${searchParams.toString()}`;
};
