
import { ResultForDownload } from "@/types/calculatorTypes";
import { showCopyToast, showDownloadToast, showShareToast, showErrorToast } from "./notificationUtils";

// Function to prepare results for download in CSV format
export const prepareResultsForCSV = (results: ResultForDownload): string => {
  let csvContent = `${results.title} Results,\n`;
  csvContent += `Date,${results.date}\n`;
  csvContent += `Unit System,${results.unitSystem}\n`;
  if (results.userName) {
    csvContent += `Name,${results.userName}\n`;
  }
  csvContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    csvContent += `${key},${value}\n`;
  });
  
  // Survivewellness branding and link 
  csvContent += `\nGenerated by,Survivewellness Health Tools\n`;
  csvContent += `For more calculators,visit https://survivewellness.com/tools-calculators/\n`;
  csvContent += `Thank you for using Survivewellness Health Calculators!`;

  return csvContent;
};

// Function to download results as CSV
export const downloadResultsAsCSV = (results: ResultForDownload, calculatorName: string): void => {
  try {
    const csvContent = prepareResultsForCSV(results);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `survivewellness-${calculatorName}-results.csv`);
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    // Show success notification with slight delay for mobile
    setTimeout(() => {
      showDownloadToast();
    }, 100);
  } catch (error) {
    console.error("Error generating CSV:", error);
    showErrorToast("Error downloading results. Please try again.");
  }
};

// Function to prepare results as text
export const prepareResultsAsText = (results: ResultForDownload): string => {
  let textContent = `${results.title} Results\n`;
  textContent += `Date: ${results.date}\n`;
  textContent += `Unit System: ${results.unitSystem}\n`;
  if (results.userName) {
    textContent += `Name: ${results.userName}\n`;
  }
  textContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    textContent += `${key}: ${value}\n`;
  });

  // Survivewellness branding and link
  textContent += `\nGenerated by: Survivewellness\n`;
  textContent += `For more calculators, visit: https://survivewellness.com/tools-calculators/\n`;
  textContent += `Thank you for using Survivewellness!`;

  return textContent;
};

// Function to share results with web share API
export const shareResults = (results: ResultForDownload): Promise<void> => {
  return new Promise((resolve, reject) => {
    if (navigator.share) {
      const textResults = prepareResultsAsText(results);
      navigator
        .share({
          title: `${results.title} Results from Survivewellness`,
          text: textResults,
        })
        .then(() => {
          setTimeout(() => {
            showShareToast();
          }, 100);
          resolve();
        })
        .catch((error) => {
          console.error("Error sharing results:", error);
          // Fallback to copy
          copyResultsToClipboard(results);
          resolve();
        });
    } else {
      // Fallback to copy
      copyResultsToClipboard(results);
      resolve();
    }
  });
};

// Function to copy results to clipboard
export const copyResultsToClipboard = (results: ResultForDownload): Promise<void> => {
  return new Promise((resolve, reject) => {
    const textToCopy = prepareResultsAsText(results);
    
    // For mobile compatibility, try different clipboard methods
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(textToCopy)
        .then(() => {
          setTimeout(() => {
            showCopyToast();
          }, 100);
          console.log("Results copied to clipboard");
          resolve();
        })
        .catch(err => {
          console.error("Clipboard API failed, trying fallback method:", err);
          // Fallback method for older browsers or mobile
          fallbackCopyTextToClipboard(textToCopy, resolve, reject);
        });
    } else {
      // Fallback method for older browsers or mobile
      fallbackCopyTextToClipboard(textToCopy, resolve, reject);
    }
  });
};

// Fallback copy method for mobile compatibility
const fallbackCopyTextToClipboard = (text: string, resolve: () => void, reject: (error: any) => void) => {
  const textArea = document.createElement("textarea");
  textArea.value = text;
  
  // Avoid scrolling to bottom
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  textArea.style.opacity = "0";
  
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  
  try {
    const successful = document.execCommand('copy');
    if (successful) {
      setTimeout(() => {
        showCopyToast();
      }, 100);
      console.log('Fallback: Copying text command was successful');
      resolve();
    } else {
      console.error('Fallback: Copying text command was unsuccessful');
      showErrorToast("Unable to copy results. Please try again.");
      reject(new Error('Copy command unsuccessful'));
    }
  } catch (err) {
    console.error('Fallback: Oops, unable to copy', err);
    showErrorToast("Unable to copy results. Please try again.");
    reject(err);
  } finally {
    document.body.removeChild(textArea);
  }
};

// Create a shareable link with encoded parameters
export const createShareableLink = (calculatorType: string, params: Record<string, string>): string => {
  const baseUrl = "#";
  const searchParams = new URLSearchParams();
  
  searchParams.append("calculator", calculatorType);
  
  Object.entries(params).forEach(([key, value]) => {
    searchParams.append(key, value);
  });
  
  return `${baseUrl}${calculatorType}?${searchParams.toString()}`;
};
