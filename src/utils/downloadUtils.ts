
import { ResultForDownload } from "@/types/calculatorTypes";

// Function to prepare results for download in CSV format
export const prepareResultsForCSV = (results: ResultForDownload): string => {
  let csvContent = `${results.title} Results,\n`;
  csvContent += `Date,${results.date}\n`;
  csvContent += `Unit System,${results.unitSystem}\n\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    csvContent += `${key},${value}\n`;
  });
  
  csvContent += `\nGenerated by,SurviveWellness\n`;
  csvContent += `Website,https://survivewellness.com`;
  
  return csvContent;
};

// Function to download results as CSV
export const downloadResultsAsCSV = (results: ResultForDownload, calculatorName: string): void => {
  try {
    const csvContent = prepareResultsForCSV(results);
    const encodedUri = encodeURI(`data:text/csv;charset=utf-8,${csvContent}`);
    
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `${calculatorName}-results.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } catch (error) {
    console.error("Error generating CSV:", error);
  }
};

// Function to prepare results as text
export const prepareResultsAsText = (results: ResultForDownload): string => {
  let textContent = `${results.title} Results\n`;
  textContent += `Date: ${results.date}\n`;
  textContent += `Unit System: ${results.unitSystem}\n\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    textContent += `${key}: ${value}\n`;
  });
  
  textContent += `\nGenerated by SurviveWellness\n`;
  textContent += `Website: https://survivewellness.com`;
  
  return textContent;
};

// Function to share results (simplified)
export const shareResults = (results: ResultForDownload): void => {
  if (navigator.share) {
    const textResults = prepareResultsAsText(results);
    navigator
      .share({
        title: `${results.title} Results`,
        text: textResults,
      })
      .catch((error) => console.error("Error sharing results:", error));
  } else {
    // Fallback if Web Share API is not supported
    const textResults = prepareResultsAsText(results);
    
    // Create a textarea to allow copying of results
    const textarea = document.createElement("textarea");
    textarea.value = textResults;
    document.body.appendChild(textarea);
    textarea.select();
    
    try {
      document.execCommand("copy");
      alert("Results copied to clipboard!");
    } catch (err) {
      console.error("Failed to copy results:", err);
      alert("Could not copy results automatically. Please copy manually.");
    }
    
    document.body.removeChild(textarea);
  }
};

// Function to copy results to clipboard
export const copyResultsToClipboard = (results: ResultForDownload): void => {
  const textToCopy = prepareResultsAsText(results);
  
  navigator.clipboard.writeText(textToCopy)
    .then(() => console.log("Results copied to clipboard"))
    .catch(err => console.error("Could not copy text: ", err));
};
