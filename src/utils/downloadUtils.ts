
import { ResultForDownload } from "@/types/calculatorTypes";
import { showCopyToast } from "./notificationUtils";

// Function to prepare results for download in CSV format
export const prepareResultsForCSV = (results: ResultForDownload): string => {
  let csvContent = `${results.title} Results,\n`;
  csvContent += `Date,${results.date}\n`;
  csvContent += `Unit System,${results.unitSystem}\n`;
  if (results.userName) {
    csvContent += `Name,${results.userName}\n`;
  }
  csvContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    csvContent += `${key},${value}\n`;
  });
  
  // Survivewellness branding without URLs
  csvContent += `\nGenerated by,Survivewellness Health Tools\n`;
  csvContent += `Thank you for using Survivewellness Health Calculators!`;

  return csvContent;
};

// Function to download results as CSV
export const downloadResultsAsCSV = (results: ResultForDownload, calculatorName: string): void => {
  try {
    const csvContent = prepareResultsForCSV(results);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `survivewellness-${calculatorName}-results.csv`);
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Error generating CSV:", error);
  }
};

// Function to prepare results as text
export const prepareResultsAsText = (results: ResultForDownload): string => {
  let textContent = `${results.title} Results\n`;
  textContent += `Date: ${results.date}\n`;
  textContent += `Unit System: ${results.unitSystem}\n`;
  if (results.userName) {
    textContent += `Name: ${results.userName}\n`;
  }
  textContent += `\n`;
  
  Object.entries(results.results).forEach(([key, value]) => {
    textContent += `${key}: ${value}\n`;
  });

  // Survivewellness branding without URLs
  textContent += `\nGenerated by: Survivewellness\n`;
  textContent += `Thank you for using Survivewellness!`;

  return textContent;
};

// Function to share results with web share API
export const shareResults = (results: ResultForDownload): void => {
  if (navigator.share) {
    const textResults = prepareResultsAsText(results);
    const calculatorPath = results.title.toLowerCase().replace(/\s+/g, '-');
    navigator
      .share({
        title: `${results.title} Results from Survivewellness`,
        text: textResults,
      })
      .catch((error) => console.error("Error sharing results:", error));
  } else {
    copyResultsToClipboard(results);
  }
};

// Function to copy results to clipboard
export const copyResultsToClipboard = (results: ResultForDownload): void => {
  const textToCopy = prepareResultsAsText(results);
  
  navigator.clipboard.writeText(textToCopy)
    .then(() => {
      showCopyToast();
      console.log("Results copied to clipboard");
    })
    .catch(err => console.error("Could not copy text: ", err));
};

// Create a shareable link with encoded parameters
export const createShareableLink = (calculatorType: string, params: Record<string, string>): string => {
  const baseUrl = "#";
  const searchParams = new URLSearchParams();
  
  searchParams.append("calculator", calculatorType);
  
  Object.entries(params).forEach(([key, value]) => {
    searchParams.append(key, value);
  });
  
  return `${baseUrl}${calculatorType}?${searchParams.toString()}`;
};
